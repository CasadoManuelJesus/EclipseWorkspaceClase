package Ejercicio4;

import java.util.Iterator;

/*
 * 4.- Región crítica. Los métodos sincronizados en Java solo pueden tener un hilo
 * ejecutándose dentro de ellos al mismo tiempo. Son necesarios cuando un
 * método accede a un recurso que puede ser consumido por un único proceso.
 * Para evitar que un algoritmo sea ejecutado por más de un hilo de forma
 * simultánea, Java nos permite definir un método con el modificador:
 * synchronized.
 * Crear una clase HiloTarea que envie un mensaje 10 veces y entre
 * mensaje y mensaje espere 3 segundos. El mensaje estará encapsulado en una
 * clase Mensaje. Crear dos hilos de ejecución tal que hasta que no se envie el
 * primer mensaje de uno, el otro hilo no pueda enviar otro mensaje. Haced uso de
 * synchronized.
*/
public class HiloTarea extends Thread{
	private Mensaje mensaje;
	
	public HiloTarea(Mensaje mensaje) {
		super();
		this.mensaje = mensaje;
	}

	@Override
	public void run() {
		for (int i = 0; i < 10; i++) {
			mensaje = new Mensaje("MSG"+(i+1));
			enviarMensaje(mensaje);
			
		}
		
	}
	
	public synchronized void enviarMensaje(Mensaje mensaje) {
		System.out.println(getName()+" enterado del mensaje de: "+mensaje.getContenido());
	}
	
	public static void main(String[] args) {
		HiloTarea hilo1 = new HiloTarea(new Mensaje("MSG"));
		HiloTarea hilo2 = new HiloTarea(new Mensaje("MSG"));
		hilo1.start();
		hilo2.start();
		
	}

}
